import type { ChannelStateContextValue } from '../../../context/ChannelStateContext';
import type { DefaultAttachmentType, DefaultChannelType, DefaultMessageType, DefaultUserType } from '../../../types/types';
export declare const useCreateChannelStateContext: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../../types/types").DefaultUserTypeInternal>>(value: Omit<import("../../../context/ChannelStateContext").ChannelState<At, Ch, Co, Ev, Me, Re, Us>, "typing"> & {
    channel: import("stream-chat").Channel<At, Ch, Co, Ev, Me, Re, Us>;
    channelConfig: import("stream-chat").ChannelConfigWithInfo<Co> | undefined;
    multipleUploads: boolean;
    notifications: import("../../../context/ChannelStateContext").ChannelNotifications;
    acceptedFiles?: string[] | undefined;
    maxNumberOfFiles?: number | undefined;
    mutes?: import("stream-chat").Mute<Us>[] | undefined;
    watcher_count?: number | undefined;
} & {
    skipMessageDataMemoization?: boolean | undefined;
}) => ChannelStateContextValue<At, Ch, Co, Ev, Me, Re, Us>;
//# sourceMappingURL=useCreateChannelStateContext.d.ts.map